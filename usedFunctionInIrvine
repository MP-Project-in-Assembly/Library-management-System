;-----------------------------------
; Standard 4-bit color definitions
;-----------------------------------
;black        = 0000b
;blue         = 0001b
;green        = 0010b
;cyan         = 0011b
;white        = 1111b
;magenta      = 0101b
;yellow       = 1110b
;lightBlue    = 1001b
;-----------------------------------------------------------------------------------------------------------------------------------

;______________________implementation of write string_________________
;       MOV EDX, ADDRESS   	load address in EDX
;	      MOV AH,9      
;    	  INT 21H 



;_____________________implementation of write char____________________
;       load char in EAX
;       mov EDX,EAX
;       mov ah, 02h
;       int 21h


;_____________________implementation of gotoxy________________________
Gotoxy PROC
;
; Locate the cursor
; Receives: DH = screen row, DL = screen column
.data
        _cursorPosition COORD <>
.code
        pushad

        CheckInit	; was console initialized?
        movzx ax,dl
        mov _cursorPosition.X, ax
        movzx ax,dh
        mov _cursorPosition.Y, ax
        INVOKE SetConsoleCursorPosition, consoleOutHandle, _cursorPosition

        popad
        ret
Gotoxy ENDP


;_____________________implementation of delay________________________
Delay PROC
;
; Delay (pause) the current process for a given number
; of milliseconds.
; Receives: EAX = number of milliseconds
; Returns: nothing
;------------------------------------------------------

	pushad
	INVOKE Sleep,eax
	popad
	ret

Delay ENDP


;_____________________implentation of read int______________________
;       MOV AH,1         
;       INT 21H
;       AX contain hex of char input
;       sub AX,30H          to transfer into int


;____________________implementation of set text color_______________
SetTextColor PROC
;
; Change the color of all subsequent text output.
; Receives: AX = attribute. Bits 0-3 are the foreground
; 	color, and bits 4-7 are the background color.
; Returns: nothing
;------------------------------------------------------------

	pushad
	CheckInit

 	INVOKE SetConsoleTextAttribute, consoleOutHandle, ax

	popad
	ret
SetTextColor ENDP


;____________________implementation of Randomize_______________
Randomize PROC
;
; Re-seeds the random number generator with the current time
; in seconds. Calls GetSystemTime, which is accurate to 10ms.
; Receives: nothing
; Returns: nothing
;--------------------------------------------------------
	  pushad

	  INVOKE GetSystemTime,OFFSET sysTime
	  movzx eax,sysTime.wMilliseconds
	  mov   seed,eax

	  popad
	  ret
Randomize ENDP


;____________________implementation of RandomRange_______________
RandomRange PROC
;
; Returns an unsigned pseudo-random 32-bit integer
; in EAX, between 0 and n-1. Input parameter:
; EAX = n.
;--------------------------------------------------------------
	 push  ebx
;____________________ReadyKey_____________________________________

MOV CX,0Eh ;Our initial string has 14 characters (E in hexadecimal)
beginning:
MOV AH,0 ;INT 16,0 reads one key input
INT 16h
CMP AH,1 ;1 is the scan code for the Escape key
JE ender
CMP AH,1Ch ;1 is the scan code for the Enter key
JE ender
	 push  edx
	 mov   ebx,eax  ; maximum value
	 call  Random32 ; eax = random number
	 mov   edx,0
	 div   ebx      ; divide by max value
	 mov   eax,edx  ; return the remainder

	 pop   edx
	 pop   ebx
	 ret
RandomRange ENDP
CMP AH,0E ;0E is the scan code for the Backspace key
JE backspace
;At this point, we should have a key input that isn't Escape, Enter, or Backspace.
;Let's output it to the screen and also copy it to our memory buffer after the program code.
;The ASCII character is already in AL, so we can just work with that.
MOV DI,CX
;CX contains how many characters have been entered so far (plus the initial value of 14),
;but you can't do an offset MOV with CX, so let's use DI, with which we can do an offset MOV.
MOV [156h+DI],AL ;Store the character in our buffer which begins at 156h
INC CX
MOV AH,0Eh ;INT 10,E outputs the character in AL
MOV BH,0 ;Page number
MOV BL,7 ;Normal light gray text on a black background
INT 10h
JMP beginning

backspace:
MOV AL,8 ;8 is Backspace!
MOV AH,0Eh 
;INT 10,E outputs the character in AL
MOV BH,0
;Page number
MOV BL,7 
;Normal light gray text on a black background
INT 10h
MOV AL,20h 
;20h is Space!
MOV AH,9 
;INT 10,9 outputs the character in AL without moving the cursor
MOV BH,0 
;Page number
MOV BL,7 
;Normal light gray text on a black background
INT 10h
DEC CX
JMP beginning
ender:
PUSH CS
POP DS 
;These two lines make DS the current code segment
MOV SI,156h
;Location of our buffer (program code is 56h bytes long)
